var uuid = require('node-uuid');
var AES = require("crypto-js/aes");
var SHA256 = require("crypto-js/sha256");
var CryptoJS = require("crypto-js");

var _store = {}; // TODO impl store
function cookieValidator() {
  var _aesKey = 'iCauth is good!';

  var _generateMessage = function(userId) {
    return userId + ';' + uuid.v4();
  };

  var _parseMessage = function(message) {
    return message.split(';')[0];
  };

  return {
    generate: function(userId) {
      var _msg = _generateMessage(userId);
      var _hash = SHA256(_msg).toString();
      var _encodedMsg = AES.encrypt(_msg, _aesKey, {
        iv: _hash
      }).toString();
      var _context = {
        user: userId,
        encoded: _encodedMsg,
        iv: _hash
      };
      _store[_encodedMsg] = _context;
      console.log(_context);
      return _encodedMsg;
    },
    validate: function(encodedMsg) {
      var _context = _store[encodedMsg];
      if (!_context) {
        return false;
      } else {
        console.log('has _context');
        var _msg = AES.decrypt(encodedMsg, _aesKey, {
          iv: _context.iv
        }).toString(CryptoJS.enc.Utf8);
        console.log('_msg:' + _msg);
        var _userId = _parseMessage(_msg);
        return _userId == _context.user;
      }
    },
    getUserId: function(encodedMsg) {
      var _context = _store[encodedMsg];
      if (!_context) {
        return '';
      } else {
        var _msg = AES.decrypt(encodedMsg, _aesKey, {
          iv: _context.iv
        }).toString(CryptoJS.enc.Utf8);
        return _parseMessage(_msg);
      }
    },
    deprecated: function(encodedMsg){
      if(_store[encodedMsg]){
        _store[encodedMsg] = undefined;
      }
    }
  };
};

module.exports = cookieValidator;
